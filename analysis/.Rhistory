library(here)
library(readr)
library(magrittr)
library(stringr)
library(tibble)
library(data.table)
library(ggplot2)
library(kableExtra)
library(gridExtra)
library(survival)
library(jsonlite)
library(caret)
library(ComplexHeatmap)
library(htmltools)
library(DT)
library(matrixStats)
library(RNASeqUtilities)
library(ggpubr)
library(survminer)
library(randomcoloR)
source(here("code/utilities.R"))
source(here("code/utilities_drug.R"))
# Chunk 3: bcmagenes
go1 <- read_tsv(here("data/bcma/GO_tumor_necrosis_factor.tsv"))
go2 <- read_tsv(here("data/bcma/GO_JNK.tsv"))
go3 <- read_tsv(here("data/bcma/GO_ATK.tsv"))
go4 <- read_tsv(here("data/bcma/GO_MAPK.tsv"))
# Chunk 4: load
gen_sym <- read_csv(here("data/prog_def_full_regs.csv"))
reg_def <- read_csv(here("data/regulon_definition.csv"))
if(FALSE) {
gen_sym %>%
dplyr::filter(regulon==2944) %>%
dplyr::select(SYMBOL) %>%
unique() %>%
view()
gen_sym %>%
dplyr::filter(SYMBOL=="PRIM1") %>%
##dplyr::select(SYMBOL) %>%
unique() %>%
view()
}
## drug constrained network activity is generated with getDrugTherapyActivity
## in utilities_drug.R
## drug_information_processing_updated - file where DCNA is generated
## read in drug pheno dataENSG00000007968
drug_pheno <- read_csv(here("data/drug_map_me_to_patient_v3.csv"))
if(FALSE) {
drug_pheno %>%
dplyr::filter(TargetSymbol=="PRIM1") %>%
dplyr::select(Drug, TargetSymbol) %>%
dplyr::distinct() %>%
view()
}
## regulon activity
regs <- read_csv(here("data/IA12_regulon_activity.csv"))
colnames(regs)[1] <- "regulon"
## get list of genes upregulated at relapse
relapse_genes <- read_csv(here("data/bcma/table0.csv"))
drug_fda <- read_csv(here("data/BCMA/MM785_case2_enrichments_MM.csv"))
drug_fda %>%
dplyr::select(Drug, Target) %>%
unique() %>%
group_by(Target) %>%
summarise(drugs = paste(Drug, collapse = " ")) %>%
rename(genes=Target)->
tabb
mm_fda <- read_csv(here("data/bcma/MM785_case2_enrichments_MM.csv"))
mm_fda %>%
dplyr::select(Disease, Drug, Target) %>%
dplyr::distinct() %>%
arrange(Drug) ->
tmp
dadd <- data.frame(genes=c("RRM2", "RRM1", "PRIM2", "PRIM1"),
drugs=c("MOTEXAFIN GADOLINIUM",
paste("MOTEXAFIN GADOLINIUM", "CLOFARABINE", "GEMCITABINE", "FLUDARABINE PHOSPHATE", sep=" "),
paste("CLOFARABINE", "GEMCITABINE", "CYTARABINE", sep=" "),
paste("CLOFARABINE", "GEMCITABINE", "CYTARABINE", "FLUDARABINE PHOSPHATE", sep=" ")))
tabb <- rbind(tabb, dadd)
## regulons identified with targets
dregs <- c(2173, 2944, 2046, 2636, 1096, 2319, 2942, 2172, 1393, 2043, 614, 1384, 635, 1626, 2719)
## get all drug targets
dgenes <- unique(tabb$genes)
# Chunk 5
## generate table of regulons and assorted info
gen_sym %>%
dplyr::filter(regulon %in% dregs) %>%
dplyr::select(regulon, SYMBOL, Reg_SYMBOL) %>%
dplyr::distinct() %>%
dplyr::mutate(Reg_SYMBOL=ifelse(regulon==2942 | regulon==2944, "E2F2", Reg_SYMBOL))  ->
reg_tab
## identify regulon genes that are upregulated at relapse
up_genes <- intersect(unique(reg_tab$SYMBOL), relapse_genes$`Gene ID`)
reg_tab %<>%
mutate(upreg=ifelse(SYMBOL %in% up_genes, TRUE, FALSE))
## map drug targets and drugs to regulons
reg_tab %>%
dplyr::left_join(tabb, by=c("SYMBOL"="genes")) -> tmp %>%
dplyr::select(regulon, drugs) %>%
distinct() %>%
dplyr::filter(!is.na(drugs)) %>%
group_by(regulon) %>%
summarise(drugs = paste(drugs, collapse = " ")) ->
drug_tab
## map drug targets and drugs to regulons
reg_tab %>%
dplyr::left_join(tabb, by=c("SYMBOL"="genes")) %>%
dplyr::select(regulon, drugs) %>%
distinct() %>%
dplyr::filter(!is.na(drugs)) %>%
group_by(regulon) %>%
summarise(drugs = paste(drugs, collapse = " ")) ->
drug_tab
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE)
options(knitr.duplicate.label = "allow")
# Chunk 2: libraries
library(tidyverse)
library(knitr)
library(here)
library(readr)
library(magrittr)
library(stringr)
library(tibble)
library(data.table)
library(ggplot2)
library(kableExtra)
library(gridExtra)
library(survival)
library(jsonlite)
library(caret)
library(ComplexHeatmap)
library(htmltools)
library(DT)
library(matrixStats)
library(RNASeqUtilities)
library(ggpubr)
library(survminer)
library(randomcoloR)
source(here("code/utilities.R"))
source(here("code/utilities_drug.R"))
# Chunk 3: bcmagenes
go1 <- read_tsv(here("data/bcma/GO_tumor_necrosis_factor.tsv"))
go2 <- read_tsv(here("data/bcma/GO_JNK.tsv"))
go3 <- read_tsv(here("data/bcma/GO_ATK.tsv"))
go4 <- read_tsv(here("data/bcma/GO_MAPK.tsv"))
# Chunk 4: load
gen_sym <- read_csv(here("data/prog_def_full_regs.csv"))
reg_def <- read_csv(here("data/regulon_definition.csv"))
if(FALSE) {
gen_sym %>%
dplyr::filter(regulon==2944) %>%
dplyr::select(SYMBOL) %>%
unique() %>%
view()
gen_sym %>%
dplyr::filter(SYMBOL=="PRIM1") %>%
##dplyr::select(SYMBOL) %>%
unique() %>%
view()
}
## drug constrained network activity is generated with getDrugTherapyActivity
## in utilities_drug.R
## drug_information_processing_updated - file where DCNA is generated
## read in drug pheno dataENSG00000007968
drug_pheno <- read_csv(here("data/drug_map_me_to_patient_v3.csv"))
if(FALSE) {
drug_pheno %>%
dplyr::filter(TargetSymbol=="PRIM1") %>%
dplyr::select(Drug, TargetSymbol) %>%
dplyr::distinct() %>%
view()
}
## regulon activity
regs <- read_csv(here("data/IA12_regulon_activity.csv"))
colnames(regs)[1] <- "regulon"
## get list of genes upregulated at relapse
relapse_genes <- read_csv(here("data/bcma/table0.csv"))
drug_fda <- read_csv(here("data/BCMA/MM785_case2_enrichments_MM.csv"))
drug_fda %>%
dplyr::select(Drug, Target) %>%
unique() %>%
group_by(Target) %>%
summarise(drugs = paste(Drug, collapse = " ")) %>%
rename(genes=Target)->
tabb
mm_fda <- read_csv(here("data/bcma/MM785_case2_enrichments_MM.csv"))
mm_fda %>%
dplyr::select(Disease, Drug, Target) %>%
dplyr::distinct() %>%
arrange(Drug) ->
tmp
dadd <- data.frame(genes=c("RRM2", "RRM1", "PRIM2", "PRIM1"),
drugs=c("MOTEXAFIN GADOLINIUM",
paste("MOTEXAFIN GADOLINIUM", "CLOFARABINE", "GEMCITABINE", "FLUDARABINE PHOSPHATE", sep=" "),
paste("CLOFARABINE", "GEMCITABINE", "CYTARABINE", sep=" "),
paste("CLOFARABINE", "GEMCITABINE", "CYTARABINE", "FLUDARABINE PHOSPHATE", sep=" ")))
tabb <- rbind(tabb, dadd)
## regulons identified with targets
dregs <- c(2173, 2944, 2046, 2636, 1096, 2319, 2942, 2172, 1393, 2043, 614, 1384, 635, 1626, 2719)
## get all drug targets
dgenes <- unique(tabb$genes)
# Chunk 5
## generate table of regulons and assorted info
gen_sym %>%
dplyr::filter(regulon %in% dregs) %>%
dplyr::select(regulon, SYMBOL, Reg_SYMBOL) %>%
dplyr::distinct() %>%
dplyr::mutate(Reg_SYMBOL=ifelse(regulon==2942 | regulon==2944, "E2F2", Reg_SYMBOL))  ->
reg_tab
## identify regulon genes that are upregulated at relapse
up_genes <- intersect(unique(reg_tab$SYMBOL), relapse_genes$`Gene ID`)
reg_tab %<>%
mutate(upreg=ifelse(SYMBOL %in% up_genes, TRUE, FALSE))
## map drug targets and drugs to regulons
reg_tab %>%
dplyr::left_join(tabb, by=c("SYMBOL"="genes")) %>%
dplyr::select(regulon, drugs) %>%
distinct() %>%
dplyr::filter(!is.na(drugs)) %>%
group_by(regulon) %>%
summarise(drugs = paste(drugs, collapse = " ")) ->
drug_tab
## remove duplicates in drugs
drug_tab %<>%
mutate(drugs = drugs %>%
str_split(" ") %>%              # Split each string by comma
map(~ unique(.x)) %>%          # Remove duplicates in each row
map_chr(~ str_c(.x, collapse = " ")))
all_d <- NULL
for(r in drug_tab$regulon) {
drug_tab %>%
dplyr::filter(regulon==r) -> tmp
vec <- unlist(str_split(tmp$drugs, " "))
vec1 <- unlist(unique(vec))
all_d <- c(all_d, vec1)
}
## sort(unique(all_d))
fda_approv <- c("AZACITIDINE", "CLOFARABINE",  "CYTARABINE", "DECITABINE",
"FLUDARABINE PHOSPHATE" , "GEMCITABINE", "IDARUBICIN",
"METHOTREXATE", "MITOXANTRONE", "PRALATREXATE")
## concatanate all genes in each regulson
result <- reg_tab %>%
group_by(regulon) %>%
summarise(upreg_genes = str_c(SYMBOL[upreg], collapse = " "),
nonupreg_genes = str_c(SYMBOL[!upreg], collapse = " "))
## reformat for regulon, drug target
reg_tab %>%
filter(SYMBOL %in% dgenes) %>%
dplyr::distinct() %>%
group_by(regulon) %>%
summarise(targets = paste(SYMBOL, collapse = " ")) ->
reg_drug
## add regulator
reg_tab %>%
dplyr::select(regulon, Reg_SYMBOL) %>%
unique() %>%
rename(regulator=Reg_SYMBOL) ->
regulators
reg_drug %<>%
dplyr::left_join(regulators)
result %>%
dplyr::left_join(drug_tab) %>%
dplyr::left_join(reg_drug) %>%
dplyr::select(regulon, targets, drugs, regulator, upreg_genes, nonupreg_genes) ->
all_tab
write_delim(all_tab, here("data/bcma/bcma_table.csv"), delim=",")
## make sure drug targets are in regulon
for(d in dregs) {
all_tab %>%
dplyr::filter(regulon==d) ->
tmp
sameys <- intersect(unlist(str_split(tmp$targets, " ")),
c(unlist(str_split(tmp$upreg_genes, " ")),
unlist(str_split(tmp$nonupreg_genes, " "))))
##print(paste(d, ": ", length(sameys), " ", length(unlist(str_split(tmp$targets, " ")))))
if(length(sameys) != length(unlist(str_split(tmp$targets, " "))))
print(paste(d, ": missing target"))
}
# Chunk 6
## read in BCMA network genes
## https://www.bosterbio.com/pathway-maps/immunology-inflammation/b-cell-receptor-signaling-pathway?srsltid=AfmBOooblJCcjwGamDMooMd2ZIRvHIYCbq2PitCfzV5uaxdgdJRD5C7Y
bcma <- read_csv(here("data/bcma/BCMA_genes.csv"), col_names=FALSE)
bcma <- bcma %>% select(X1) %>% unique()
##num_bcma <- nrow(bcma)  ## number of bcma genes
num_mm <- length(unique(gen_sym$SYMBOL)) ## number of mm genes
reg_tab <- reg_tab %>% mutate(upreg=factor(upreg, levels=unique(upreg)))
outie <- data.frame()
for(d in dregs) {
reg_t <- gen_sym %>% dplyr::filter(regulon==d)
## get genes in regulon
reg_genes <- reg_t %>% dplyr::select(SYMBOL) %>% unique()
## number of regulon genes
num_reg <- nrow(reg_genes)
## get number of up-regulated/nonup-regulated genes in regulon
reg_tab %>%
dplyr::filter(regulon==d) %>%
mutate(up=sum(upreg==TRUE)) %>%
mutate(down=sum(upreg==FALSE)) %>%
dplyr::select(up, down) %>%
distinct() ->
reg_counts
mat <- matrix(c(unlist(reg_counts),  num_reg, num_mm), ncol=2)
fish <- fisher.test(mat)$p.value
outie <- rbind(outie, data.frame(regulon=d,
num_regulon_genes=num_reg,
num_reg_up_genes=reg_counts$up,
pvalue=fish))
}
headerKable(outie, title="Number of all genes and BCMA genes in regulon")
write_csv(outie, here("data/bcma/regulon_pvalues.csv"))
# Chunk 7: plotty
mm_risk <- read_csv(here("data/ia12_pheno_01012023.csv"))
mm_risk %<>% dplyr::arrange(GuanScore)
library(circlize)
col_fun = colorRamp2(c(-2/3, 0, 0.9), c("blue", "white", "red"))
# Chunk 8: function
## calculate deciles of a row of gene expression
## exp - vector of gene expression
## n - number of quantiles
## returns running mean of lengths ~ length(exp)/n
getPieceWiseMean <- function(exp, n=10) {
splits <- splitIndices(length(exp), n)
sapply(splits, function(x, nums=exp) return(mean(nums[x])))
}
## calculate mean of vector based on predicted risk status
## vec: vector of dcna for a drug
## pheno: mm phenotype file (mm_risk)
getPredictedRiskMean <- function(vec, phen=mm_risk) {
phen %>%
dplyr::filter(sample %in% names(vec)) %>%
dplyr::select(sample, syg_class) ->
risky
data.frame(sample=names(vec), dcna=vec) %>%
dplyr::left_join(risky) ->
tmpy
res <- tapply(tmpy$dcna, tmpy$syg_class, mean)
## format to account for missing risk values
data.frame(risk=c("low", "high", "extreme")) %>%
left_join(data.frame(risk=names(res), dcna=res)) ->
outie
res1 <- outie$dcna
names(res1) <- outie$risk
return(res1)
}
## reorder DCNA by subtype and mmSYGNAL risk classification
getRiskOrder <- function(mat, risky=mm_risk) {
subs <- c("none", "del13", "del1p", "amp1q", "WHSC1")
if(sum(risky$sample != colnames(mat)[-1]) >0 ) {
stop("getRiskOrder: mat and risky are not ordered the same")
}
## order by mmSYGNAL risk classification
risky %>%
dplyr::mutate(syg_class=factor(syg_class, levels=c("low", "high", "extreme"),
ordered=TRUE)) %>%
dplyr::arrange(syg_class) ->
risk_ordersoc_dcr[,mm_risk$sample[mm_risk$WHSC1==1]]
outie <- data.frame(Drug=mat$Drug)
for(s in subs) {
indy <- risk_order$sample[risk_order[,s]==1]
outie <- cbind(outie, mat[,indy])
}
return(outie)
}
# Chunk 9: druggies
dgenes <- sort(c("DHFR", "DNMT1", "POLA2", "POLE2", "TUBA1B", "POLD1", "PRIM1", "PRIM2", "TYMS", "AURKA",  "CDK1", "TUBA1C", "RRM1", "RRM2", "TOP2A") )
# list subtype names (mm_risk) and labels (for output)
subtypes <- c("none", "del13", "del1p", "amp1q", "WHSC1", "relapse")
sublabs <-  c("none", "del(13)", "del(1p)", "amp(1q)", "t(4;14)", "relapse")
gen_sym %>%
dplyr::filter(SYMBOL %in% dgenes) %>%
dplyr::select(regulon, SYMBOL) %>%
distinct() %>%
arrange(SYMBOL)->
dregs
## join regulon activity to regulons
dreg_df <- dregs %>% left_join(regs) %>% dplyr::select(-regulon)
## reformat as data.table
dreg_dt <- dreg_df %>%
pivot_longer(!SYMBOL, names_to="sample", values_to="activity") %>%
data.table()
## calculate drug constrained regulon activity
d1 <- dreg_dt[, .(DCNA=meanNA(activity)), by=.(SYMBOL, sample)]
## reformat for heatmap
dreg_heat <- pivot_wider(d1, names_from=sample, values_from=DCNA)
## order by risk - low -> high
soc_dcr <- data.frame(Drug=dreg_heat$SYMBOL, dreg_heat[, mm_risk$sample])
# Chunk 10: relapse
## get IA18 relapse patients
read_csv( here("data/IA18_relapse_minernorm_best_quality_risk.csv")) %>%
dplyr::arrange(GuanScore) %>%
dplyr::rename(syg_class=miner_class)->
ia18_pheno
ia18_gene_exp <- read_csv(here("data/IA18_geneexp_for_program.csv"))
ia18_reg <- read_csv(here("data/regulon_activity_py_zsamp_all.csv"))
colnames(ia18_reg)[-1] <- str_replace(colnames(ia18_reg)[-1], pattern="_BM_CD138pos",
replacement="")
ia18_reg <- data.frame(regulon=ia18_reg$regulon, ia18_reg[, ia18_pheno$sample])
## join regulon activity to regulons
rr_df <- dregs %>% left_join(ia18_reg) %>% dplyr::select(-regulon)
## reformat as data.table
rr_dt <- rr_df %>%
pivot_longer(!SYMBOL, names_to="sample", values_to="activity") %>%
data.table()
## calculate drug constrained regulon activity
drr <- rr_dt[, .(DCNA=meanNA(activity)), by=.(SYMBOL, sample)]
## reformat for heatmap
rr_heat <- pivot_wider(drr, names_from=sample, values_from=DCNA)
## order by risk - low -> high
rr_dcr <- data.frame(Drug=rr_heat$SYMBOL, rr_heat[, ia18_pheno$sample])
# Chunk 11
## order by chromosomal abnormalities
probb <- seq(0.05, 0.95, 0.1)
soc_labs_12 <- factor(rep(sublabs, each=10), ordered=TRUE, levels=sublabs)
soc_plot <- data.frame(Drug=soc_dcr$Drug,
t(apply(soc_dcr[,mm_risk$sample[mm_risk$none==1]], 1, getPieceWiseMean)),
t(apply(soc_dcr[,mm_risk$sample[mm_risk$del13==1]], 1, getPieceWiseMean)),
t(apply(soc_dcr[,mm_risk$sample[mm_risk$del1p==1]], 1, getPieceWiseMean)),
t(apply(soc_dcr[,mm_risk$sample[mm_risk$amp1q==1]], 1, getPieceWiseMean)),
t(apply(soc_dcr[,mm_risk$sample[mm_risk$WHSC1==1]], 1, getPieceWiseMean)))
## generate relapse deciles
rr_plot <- data.frame(Drug=rr_dcr$Drug, t(apply(rr_dcr[,-1], 1, getPieceWiseMean)))
## add relapse deciles to plot data
soc_plot <- cbind(soc_plot, rr_plot[,-1])
soc_heat_12 <- as.matrix(soc_plot[,-1])
rownames(soc_heat_12) <- soc_plot$Drug
## Plot all drugs with continous network activity
col_split <- factor(rep(sublabs, each=10),levels=sublabs, ordered=TRUE)
bot <- HeatmapAnnotation('disease\nprogression' = anno_block(labels = rep(c("slow -> fast"), 6),
gp=gpar(col="white"),
labels_gp = gpar(col = "black", fontsize = 7.5), show_name=TRUE))
##bot <- HeatmapAnnotation(risk=anno_text(rep(c("low -> high"), 6), which=column, show_name=TRUE))
d_plot1 <- Heatmap(soc_heat_12,
col=col_fun,
show_column_names = FALSE,
cluster_rows=FALSE,
cluster_columns=FALSE,
column_split = col_split,
column_title_gp = gpar(fontsize=11),
border=TRUE,
bottom_annotation=bot,
##column_title="Risk: low -> high",
##column_title_side="bottom",
column_gap=unit(0.3, "mm"),
row_gap=unit(0.2, "mm"),
row_names_gp = gpar(fontsize = 6.5),
row_names_side = "left",
heatmap_legend_param = list(
title = "activity",
legends_gp = gpar(fontsize = 4)
##grid_height = unit(3, "mm"),
##grid_width = unit(3, "mm")
),
show_row_dend = F,
show_column_dend = F,
##rect_gp = gpar(col = "black", lwd = 0.05),
column_names_gp = gpar(fontsize = 2))
draw(d_plot1)
# Chunk 12: plot2
### generate DCNA by risk class
soc_plot_risk <- data.frame(Drug=soc_dcr$Drug,
t(apply(soc_dcr[,mm_risk$sample[mm_risk$none==1]], 1,
getPredictedRiskMean)),
t(apply(soc_dcr[,mm_risk$sample[mm_risk$del13==1]], 1,
getPredictedRiskMean)),
t(apply(soc_dcr[,mm_risk$sample[mm_risk$del1p==1]], 1,
getPredictedRiskMean)),
t(apply(soc_dcr[,mm_risk$sample[mm_risk$amp1q==1]], 1,
getPredictedRiskMean)),
t(apply(soc_dcr[,mm_risk$sample[mm_risk$WHSC1==1]], 1,
getPredictedRiskMean)))
## generate relapse DCNA by risk class
rr_plot_risk <- data.frame(Drug=rr_dcr$Drug, t(apply(rr_dcr[,-1], 1,getPredictedRiskMean,
phen=ia18_pheno)))
soc_plot_risk <- cbind(soc_plot_risk, rr_plot_risk[,-1])
soc_heat <- as.matrix(soc_plot_risk[,-1])
rownames(soc_heat) <- soc_plot_risk$Drug
colnames(soc_heat) <- rep(c("low", "high", "extreme"), 6)
soc_heat_risk <- soc_heat
soc_labs_risk <- factor(rep(sublabs, each=3), ordered=TRUE, levels=sublabs)
d_plot_risk <-Heatmap(soc_heat_risk,
col=col_fun,
show_column_names = TRUE,
column_names_side = "top",
column_names_gp = gpar(fontsize = 10),
column_names_rot = 45,
column_names_centered = TRUE,
cluster_rows=FALSE,
cluster_columns=FALSE,
##column_title="DCNA grouped by subtype and mmSYGNAL predicted risk class",
column_split = soc_labs_risk,
column_title_gp = gpar(fontsize=11),
row_title="",
border=TRUE,
column_gap=unit(0.5, "mm"),
row_names_gp = gpar(fontsize = 6.5),
row_names_side = "left",
rect_gp = gpar(col = "grey", lwd = .2),
heatmap_legend_param = list(
title = "activity",
legends_gp = gpar(fontsize = 4)
##grid_height = unit(3, "mm"),
##grid_width = unit(3, "mm")
),
show_row_dend = F,
show_column_dend = F
)
draw(d_plot_risk)
pdf(here("data/bcma/heatmap_risk.pdf"))
draw(d_plot_risk)
dev.off()
draw(d_plot_risk)
